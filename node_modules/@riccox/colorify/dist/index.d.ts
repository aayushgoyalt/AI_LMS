/**
 * returns a new hex color string array by given primary color hue (and sat) value.
 * @author Ricco Xie
 * @param hue primary color hue
 * @param sat primary color sat, default:0.75
 * @param numOfShades Optional, number of return shades, default:12
 * @return a new hex color string array
 */
declare const calculateColorPalette: (hue: number, sat?: number, numOfShades?: number) => HEXColor[];
/**
 * returns a new hex color string array by given primary color.
 * @author Ricco Xie
 * @param color primary color string
 * @param numOfShades Optional, number of return shades
 * @return a new hex color string array
 */
declare const singleColorPalette: (color: string, numOfShades?: number) => HEXColor[];
/**
 * returns a new hex color string array by given primary color.
 * reference: https://www.radix-ui.com/docs/colors/palette-composition/understanding-the-scale
 * @author Ricco Xie
 * @param color primary color string
 * @param colorSchema Optional, default to 'light'
 * @return a new hex color string array whose length is 12. (50~1100)
 */
declare const generateRadixColorPalette: (color: string, colorSchema?: "light" | "dark") => HEXColor[];
/**
 * returns a hex color string array from white to black scales.
 * @author Ricco Xie
 * @param numOfShades Optional, number of return shades
 * @return a new hex color string array
 */
declare const getBlackWhiteColorPalette: (numOfShades?: number) => HEXColor[];

/**
 * return a new hex color string with high contrast by given background color.
 * @author Ricco Xie
 * @param bgColor background color string
 * @return a new hex color string
 */
declare const foregroundColor: (bgColor: string) => "#000000" | "#FFFFFF";
/**
 * return a new hex color string by given background color.
 * use lum to calculate
 * @author Ricco Xie
 * @param bgColor background color hex string
 * @return a new hex color string
 */
declare const foregroundColorViaLum: (bgColor: HEXColor) => HEXColor;

/**
 * return a new hex complementary color string by given source color.
 * @author Ricco Xie
 * @param color source color hex string
 * @return a new hex color string
 */
declare const complement: (color: HEXColor) => HEXColor;

type HEXColor = `#${string}`;

export { HEXColor, calculateColorPalette, complement, foregroundColor, foregroundColorViaLum, generateRadixColorPalette, getBlackWhiteColorPalette, singleColorPalette };
