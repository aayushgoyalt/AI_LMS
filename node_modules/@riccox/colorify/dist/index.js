"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  calculateColorPalette: () => calculateColorPalette,
  complement: () => complement,
  foregroundColor: () => foregroundColor,
  foregroundColorViaLum: () => foregroundColorViaLum,
  generateRadixColorPalette: () => generateRadixColorPalette,
  getBlackWhiteColorPalette: () => getBlackWhiteColorPalette,
  singleColorPalette: () => singleColorPalette
});
module.exports = __toCommonJS(src_exports);

// src/palette.ts
var import_chroma_js = __toESM(require("chroma-js"));
var calculateColorPalette = (hue, sat = 0.75, numOfShades = 12) => {
  return import_chroma_js.default.scale(
    [
      0.97,
      0.94,
      0.86,
      0.77,
      0.66,
      0.5,
      0.45,
      0.39,
      0.33,
      0.27,
      0.21,
      0.11,
      0.03
    ].map((lum) => import_chroma_js.default.hsl(hue, sat, lum))
  ).colors(numOfShades, "hex");
};
var singleColorPalette = (color, numOfShades = 12) => {
  const [hue, sat] = (0, import_chroma_js.default)(color).hsl();
  return calculateColorPalette(hue, sat, numOfShades);
};
var generateRadixColorPalette = (color, colorSchema = "light") => {
  const [hue, sat] = (0, import_chroma_js.default)(color).hsl();
  const lumScaleLight = [
    0.978,
    0.938,
    0.902,
    0.868,
    0.832,
    0.804,
    0.747,
    0.659,
    0.541,
    0.453,
    0.27,
    0.086
  ];
  const lumScaleDark = [
    0.07,
    0.11,
    0.136,
    0.158,
    0.179,
    0.205,
    0.243,
    0.313,
    0.439,
    0.52,
    0.61,
    0.93
  ];
  const lumScaleWhite = [
    1,
    0.975,
    0.94,
    0.905,
    0.875,
    0.845,
    0.815,
    0.77,
    0.18,
    0.13,
    0.07,
    0
  ];
  const lumScaleBlack = [
    0,
    0.035,
    0.075,
    0.1,
    0.12,
    0.155,
    0.19,
    0.225,
    0.91,
    0.94,
    0.975,
    1
  ];
  if (hue > 0 && sat > 0) {
    return (colorSchema === "dark" ? lumScaleDark : lumScaleLight).map(
      (lum) => import_chroma_js.default.hsl(hue, sat, lum).hex()
    );
  }
  return (colorSchema === "dark" ? lumScaleBlack : lumScaleWhite).map(
    (lum) => import_chroma_js.default.hsl(0, 0, lum).hex()
  );
};
var getBlackWhiteColorPalette = (numOfShades = 12) => {
  return import_chroma_js.default.scale().colors(numOfShades, "hex");
};

// src/foreground.ts
var import_chroma_js2 = __toESM(require("chroma-js"));
var foregroundColor = (bgColor) => {
  const [r, g, b] = (0, import_chroma_js2.default)(bgColor).rgb();
  const sum = Math.round((r * 299 + g * 587 + b * 114) / 1e3);
  return sum > 128 ? "#000000" : "#FFFFFF";
};
var foregroundColorViaLum = (bgColor) => {
  const luma = (0, import_chroma_js2.default)(bgColor).luminance();
  const alpha = (0, import_chroma_js2.default)(bgColor).alpha();
  let targetLum = luma > 0.5 ? luma - 0.5 : luma + 0.5;
  if (targetLum > 0.5 && alpha < 0.5)
    targetLum = 0.4;
  return (0, import_chroma_js2.default)(bgColor).luminance(targetLum).hex();
};

// src/complementary.ts
var complement = (color) => {
  const colorPart = color.slice(1);
  const ind = parseInt(colorPart, 16);
  let iter = ((1 << 4 * colorPart.length) - 1 - ind).toString(16);
  while (iter.length < colorPart.length) {
    iter = "0" + iter;
  }
  return `#${iter}`;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  calculateColorPalette,
  complement,
  foregroundColor,
  foregroundColorViaLum,
  generateRadixColorPalette,
  getBlackWhiteColorPalette,
  singleColorPalette
});
